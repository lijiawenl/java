import java.util.Stack;

public class visitTree {

	//钱，中，后序遍历树的形式；
	class TreeNode{
		int val;
		TreeNode left;
		TreeNode right;
	}
	//递归版本
	void F(TreeNode root){
		if(root==null)return;
		 visit(root);
		F(root.left);
		F(root.right);
		
	}
	void F1(TreeNode root){
		if(root==null)return;
		 visit(root);
		F(root.left);
		 visit(root);
		F(root.right);
		
	}
	void F2(TreeNode root){
		
		if(root==null)return;
	 
		F(root.left);
		F(root.right);
		visit(root);
	}
	//非递归的版本
	
	void Fr(TreeNode root){
		Stack<TreeNode> s = new Stack<TreeNode>();
		s.push(root);
		while(!s.isEmpty()){
			TreeNode b = s.pop();
			visit(b);
			if(b.left!=null) s.push(b.left);
			if(b.right!=null) s.push(b.right);
		}
	}
	
	void visit(TreeNode m){
		
	}
	
	
}
